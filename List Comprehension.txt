
#List Comprehension 1 parte
# Utilizando-a podemos gerar novas listas com dados processados a partir de outro iteravel
# Sintaxe da List Comprehension
#  [dado for dado in iteravel ]
# Exemplo
numeros = [1,2,3,4,5]
res = [numero * 10 for numero in numeros] # se retirar o 10, gera a mesma lista
print(res)

# para entender melhor, devemos dividir a expressão em duas partes
# A primeira, for numero in numeros(para cada numero na lista de numeros)
# Segunda parte numero * 10


res = [numero / 2 for numero in numeros ]
print(res)
def funcao(valor):
    return valor*valor
res = [funcao(numero) for numero in numeros ]
print(res)


# List Comprehension vs Loop

# utilizando Loop

numeros = [1,2,3,4,5]
numeros_dobrados = []
for numero in numeros:
    numeros_dobrados.append(numero*2)
print(numeros_dobrados)

# Utilizando List Comprehension
print([numero * 2 for numero in numeros])

nome = "Raphael Malta"
print([letra.upper() for letra in nome])

def caixa_alta(nome):
    nome = nome.replace(nome[0],nome[0].upper())
    return nome

amigos = ["raphael","diego","marcos","bryan","patotrick"]
print([caixa_alta(amigo) for amigo in amigos])


print([numero*3 for numero in range(1,10)])

print([bool(valor) for valor in [0,[],"",True,2.14,1]])

print([str(numero) for numero in [1,2,3,4,5]])

# # List Comprehension Parte 2
# Podemos adicionar estruturas condicionais logicas as nossas List Comprehension
numeros = [1, 2, 3, 4, 5, 6]
pares = [numero for numero in numeros if numero %2 == 0]
print(pares)
impares = [numero for numero in numeros if numero %2 != 0]
print(impares)


# Refatorando
pares = [numero for numero in numeros if not numero %2 ]# se for par, o resto vai ser 0, e 0 em python é false, logo not false = true

impares = [numero for numero in numeros if  numero %2 ]# qualquer impar modulo de 2 é 1,logo vai ser True
print(pares)
print(impares)



res = [numero * 2 if numero %2 ==0 else numero /2 for numero in numeros]
print(res)